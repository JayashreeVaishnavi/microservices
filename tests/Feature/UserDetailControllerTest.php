<?php

namespace Tests\Feature;

use App\Http\Resources\UserDetailResource;
use App\Models\Account;
use App\Models\UserDetail;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\BasicTestCase;

class UserDetailControllerTest extends BasicTestCase
{
    use DatabaseTransactions;
    protected $url, $listUrl;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->url = config('app.url') . '/api/v1/details';
        $this->listUrl = config('app.url') . '/api/v1/amount-details';
    }

    /**
     * Test the index page with and without limit
     */
    public function testIndexPage()
    {
        $resourceCollection = UserDetailResource::collection(UserDetail::get())->toJson();
        $this->get($this->url, $this->setUpHeaders($this->token))->assertSuccessful()->assertJson(json_decode($resourceCollection));

        $resourceCollection = UserDetailResource::collection(UserDetail::paginate(10))->toJson();
        $this->get($this->url . '?limit=10', $this->setUpHeaders($this->token))->assertSuccessful()->assertJson(json_decode($resourceCollection));
    }

    /**
     * Validation tests for storing and updating logic
     */
    public function testUserDetailStoreValidation()
    {
        $this->json('POST', $this->url, [
            'first_name' => '',
            'last_name' => '',
            'email' => '',
            'phone_number' => '',
            'address' => '',
            'accounts' => [
                ['bank_name' => '', 'account_number' => '1waw456', 'amount' => ''],
            ],
        ], $this->setUpHeaders($this->token))->assertStatus(STATUS_CODE_UNPROCESSABLE_ENTITY)
            ->assertJsonValidationErrors(['first_name', 'last_name', 'email', 'phone_number', 'accounts.0.bank_name', 'accounts.0.account_number', 'accounts.0.amount']);

        $faker = Factory::create();
        $this->json('POST', $this->url, [
            'first_name' => $faker->firstName,
            'last_name' => $faker->lastName,
            'email' => 'testing',
            'phone_number' => 1233445,
            'address' => $faker->address,
            'accounts' => [
                ['bank_name' => $faker->company, 'account_number' => $faker->bankAccountNumber, 'amount' => 'grdgf'],
            ],
        ], $this->setUpHeaders($this->token))->assertStatus(STATUS_CODE_UNPROCESSABLE_ENTITY)
            ->assertJsonValidationErrors(['email', 'phone_number', 'accounts.0.amount']);
    }

    /**
     * Test the storing logic
     */
    public function testStoreUserDetail()
    {
        $faker = Factory::create();
        $email = $faker->email;
        $firstName = $faker->firstName;
        $lastName = $faker->lastName;
        $address = $faker->address;
        $company = $faker->company;
        $bankAccountNumber = $faker->bankAccountNumber;
        $response = $this->json('POST', $this->url, [
            'first_name' => $firstName,
            'last_name' => $lastName,
            'email' => $email,
            'phone_number' => 9876543213,
            'address' => $address,
            'accounts' => [
                ['bank_name' => $company, 'account_number' => $bankAccountNumber, 'amount' => 1000],
            ],
        ], $this->setUpHeaders($this->token));
        $response->assertSuccessful();
        $userDetail = UserDetail::where('email', $email)->first();
        $this->assertDatabaseHas('user_details', ['first_name' => $firstName,
            'last_name' => $lastName,
            'email' => $email,
            'phone_number' => 9876543213,
            'address' => $address,]);
        $this->assertDatabaseHas('accounts', ['detail_id' => $userDetail->id, 'bank_name' => $company, 'account_number' => $bankAccountNumber, 'amount' => 1000],);
    }

    /**
     * Test show user detail
     */
    public function testShowUserDetail()
    {
        $detail = UserDetail::factory()->has(Account::factory())->create();
        $uri = $this->url . '/' . $detail->id;
        $this->get($uri, $this->setUpHeaders($this->token))
            ->assertSuccessful();
    }

    /**
     * Delete user detail test
     */
    public function testDeleteUserDetail()
    {
        $detail = UserDetail::factory()->has(Account::factory())->create();
        $uri = $this->url . '/' . $detail->id;
        $this->delete($uri, [], $this->setUpHeaders($this->token))
            ->assertSuccessful()
            ->assertJson(['message' => 'User detail deleted successfully']);
    }

    /**
     * Test update user detail
     */
    public function testUpdateUserDetail()
    {
        $detail = UserDetail::factory()->has(Account::factory())->create();
        $uri = $this->url . '/' . $detail->id;
        $this->patch($uri, [], $this->setUpHeaders($this->token))
            ->assertSuccessful();
    }

    /**
     * Test user details with account list
     */
    public function testUserDetailAccountList()
    {
        $resourceCollection = UserDetailResource::collection(UserDetail::with('accounts')->get())->toJson();
        $this->get($this->listUrl, $this->setUpHeaders($this->token))->assertSuccessful()->assertJson(json_decode($resourceCollection));

        $resourceCollection = UserDetailResource::collection(UserDetail::with('accounts')->paginate(10))->toJson();
        $this->get($this->listUrl . '?limit=10', $this->setUpHeaders($this->token))->assertSuccessful()->assertJson(json_decode($resourceCollection));
    }
}
