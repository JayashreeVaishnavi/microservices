<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\BasicTestCase;
use Tymon\JWTAuth\Facades\JWTAuth;

class AuthControllerTest extends BasicTestCase
{
    use DatabaseTransactions;
    protected $loginUrl, $logoutUrl;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->loginUrl = config('app.url') . '/api/v1/login';
        $this->logoutUrl = config('app.url') . '/api/v1/logout';
    }

    /**
     * Test successful login
     *
     * @return void
     */
    public function testLogin()
    {
        $response = $this->post($this->loginUrl, [
            'email' => $this->user->email,
            'password' => 'password',
        ]);
        $response->assertSuccessful();
        $response->assertJsonStructure([
            'access_token', 'token_type', 'user',
        ]);
    }

    /**
     * Test LoginRequest Messages
     */
    public function testValidationMessages()
    {
        $this->json('POST', $this->loginUrl, [
            'email' => '',
            'password' => '',
        ])->assertStatus(STATUS_CODE_UNPROCESSABLE_ENTITY)
            ->assertJsonValidationErrors(['email', 'password']);

        $this->json('POST', $this->loginUrl, [
            'email' => 'test',
            'password' => 'password',
        ])->assertStatus(STATUS_CODE_UNPROCESSABLE_ENTITY)
            ->assertJsonValidationErrors(['email']);
    }

    /**
     * Test login with wrong credentials
     */
    public function testLoginWithWrongCredentials()
    {
        $this->post($this->loginUrl, [
            'email' => 'test@gmail.com',
            'password' => 'password',
        ])->assertStatus(STATUS_CODE_UNAUTHORIZED)
            ->assertJson(getCommonErrorResponse('UNAUTHORIZED_ERROR', 'User unauthorized.'));
    }

    /**
     * Test successful logout
     */
    public function testLogout()
    {
        $this->post($this->logoutUrl, [], $this->setUpHeaders($this->token))
            ->assertSuccessful()
            ->assertJson(['message' => 'Successfully logged out']);
    }
}
